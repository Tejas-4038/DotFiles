"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowManagement = void 0;
const bus_1 = require("./bus");
;
const transformWorkspace = (proto) => {
    return {
        id: proto.id,
        name: proto.name,
        active: proto.active,
        monitorId: proto.monitor
    };
};
const transformWindow = (proto) => {
    return {
        id: proto.id,
        workspaceId: proto.workspaceId,
        active: proto.active,
        bounds: { position: { x: proto.x, y: proto.y }, size: { width: proto.width, height: proto.height } },
        application: proto.app
    };
};
/**
 */
class WindowManagementImpl {
    async ping() {
        const res = await bus_1.bus.turboRequest('wm.ping', {});
        return res.unwrap().ok;
    }
    async getWindows(options = {}) {
        const res = await bus_1.bus.turboRequest('wm.getWindows', options);
        return res.unwrap().windows.map(transformWindow);
    }
    async getActiveWorkspace() {
        const res = await bus_1.bus.turboRequest('wm.getActiveWorkspace', {});
        return transformWorkspace(res.unwrap().workspace);
    }
    async getWorkspaces() {
        const res = await bus_1.bus.turboRequest('wm.getWorkspaces', {});
        return res.unwrap().workspaces.map(transformWorkspace);
    }
    async getWindowsOnActiveWorkspace() {
        const workspace = await this.getActiveWorkspace();
        return this.getWindows({ workspaceId: workspace.id });
    }
    async setWindowBounds(payload) {
        await bus_1.bus.turboRequest('wm.setWindowBounds', payload);
    }
    async getActiveWindow() {
        const res = await bus_1.bus.turboRequest('wm.getActiveWindow', {});
        return transformWindow(res.unwrap().window);
    }
}
;
exports.WindowManagement = new WindowManagementImpl();
