"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = exports.GridAccessory = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const image_1 = require("../image");
const crypto_1 = require("crypto");
const empty_view_1 = require("./empty-view");
const dropdown_1 = require("./dropdown");
var GridInset;
(function (GridInset) {
    GridInset["Small"] = "small";
    GridInset["Medium"] = "medium";
    GridInset["Large"] = "large";
})(GridInset || (GridInset = {}));
var GridFit;
(function (GridFit) {
    GridFit["Contain"] = "contain";
    GridFit["Fill"] = "fill";
})(GridFit || (GridFit = {}));
const GridRoot = ({ searchBarAccessory, children, actions, inset, fit = GridFit.Contain, aspectRatio = "1", ...props }) => {
    if (typeof props.enableFiltering === "boolean" &&
        typeof props.filtering === "undefined") {
        props.filtering = props.enableFiltering;
    }
    return ((0, jsx_runtime_1.jsxs)("grid", { fit: fit, inset: inset, aspectRatio: aspectRatio, ...props, children: [searchBarAccessory, children, actions] }));
};
const GridItem = ({ detail, actions, keywords, ...props }) => {
    const id = (0, react_1.useRef)(props.id ?? (0, crypto_1.randomUUID)());
    const nativeProps = {
        title: props.title,
        subtitle: props.subtitle,
        id: id.current,
        keywords,
    };
    const isColor = (content) => {
        return !!content["color"];
    };
    const isDataWithTooltip = (content) => {
        return !!content["value"];
    };
    if (isColor(props.content)) {
        nativeProps.content = { color: props.content.color };
    }
    else if (isDataWithTooltip(props.content)) {
        nativeProps.content = {
            value: (0, image_1.serializeImageLike)(props.content.value),
            tooltip: props.content.tooltip,
        };
    }
    else {
        nativeProps.content = (0, image_1.serializeImageLike)(props.content);
    }
    return ((0, jsx_runtime_1.jsxs)("grid-item", { ...nativeProps, children: [detail, actions] }));
};
const GridSection = ({ fit = GridFit.Contain, aspectRatio = "1", inset, ...props }) => {
    const nativeProps = {
        fit,
        aspectRatio,
        inset,
        ...props,
    };
    return (0, jsx_runtime_1.jsx)("grid-section", { ...nativeProps });
};
const GridAccessory = (props) => {
    return (0, jsx_runtime_1.jsx)("list-accessory", {});
};
exports.GridAccessory = GridAccessory;
exports.Grid = Object.assign(GridRoot, {
    Section: GridSection,
    EmptyView: empty_view_1.EmptyView,
    Dropdown: dropdown_1.Dropdown,
    Inset: GridInset,
    Item: Object.assign(GridItem, {
        Accessory: exports.GridAccessory,
    }),
});
