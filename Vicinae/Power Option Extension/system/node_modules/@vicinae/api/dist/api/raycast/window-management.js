"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowManagement = void 0;
const system_1 = require("./system");
const vicinae = __importStar(require(".."));
var DesktopType;
(function (DesktopType) {
    DesktopType[DesktopType["User"] = 0] = "User";
    DesktopType[DesktopType["FullScreen"] = 1] = "FullScreen";
})(DesktopType || (DesktopType = {}));
;
const transformNativeDesktop = (win) => {
    return {
        id: win.id,
        screenId: win.monitorId,
        size: { width: 0, height: 0 }, // FIXME: implement
        active: win.active,
        type: DesktopType.User
    };
};
const transformNativeWindow = (win) => {
    return {
        id: win.id,
        fullScreenSettable: true,
        positionable: true,
        resizable: true,
        active: win.active,
        bounds: win.bounds,
        desktopId: win.workspaceId ?? '0',
        application: win.application && (0, system_1.transformApp)(win.application)
    };
};
class RaycastWindowManagement {
    async getActiveWindow() {
        const window = await vicinae.WindowManagement.getActiveWindow();
        return transformNativeWindow(window);
    }
    async getDesktops() {
        const workspaces = await vicinae.WindowManagement.getWorkspaces();
        return workspaces.map(transformNativeDesktop);
    }
    async getWindowsOnActiveDesktop() {
        const wins = await vicinae.WindowManagement.getWindowsOnActiveWorkspace();
        return wins.map(transformNativeWindow);
    }
    constructor() { }
}
;
exports.WindowManagement = new RaycastWindowManagement;
