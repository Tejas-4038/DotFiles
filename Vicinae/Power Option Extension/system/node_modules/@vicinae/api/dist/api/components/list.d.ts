import React, { ReactNode } from "react";
import { Image, ImageLike } from "../image";
import { Color, ColorLike } from "../color";
export declare namespace List {
    namespace Item {
        type Props = ListItemProps;
        type Tag = string | Date | undefined | null | {
            color: ColorLike;
            value: string | Date | undefined | null;
        };
        type Text = string | Date | undefined | null | {
            color: Color;
            value: string | Date | undefined | null;
        };
        type Accessory = ({
            tag?: Tag;
        } | {
            text?: Text;
        }) & {
            icon?: Image.ImageLike;
            tooltip?: string | null;
        };
    }
}
type ListProps = {
    actions?: React.ReactNode;
    children?: React.ReactNode;
    filtering?: boolean;
    /**
     * @deprecated use filtering
     */
    enableFiltering?: boolean;
    isLoading?: boolean;
    isShowingDetail?: boolean;
    searchText?: string;
    searchBarPlaceholder?: string;
    navigationTitle?: string;
    searchBarAccessory?: ReactNode;
    onSearchTextChange?: (text: string) => void;
    onSelectionChange?: (id: string) => void;
};
export type ListItemProps = {
    title: string;
    keywords?: string[];
    detail?: React.ReactNode;
    icon?: ImageLike;
    id?: string;
    subtitle?: string;
    actions?: ReactNode;
    accessories?: List.Item.Accessory[];
};
export type ListItemDetailProps = {
    isLoading?: boolean;
    markdown?: string;
    metadata?: React.ReactNode;
};
type ListSectionProps = {
    title?: string;
    subtitle?: string;
    children?: ReactNode;
};
export declare const ListAccessory: React.FC<List.Item.Accessory>;
export declare const List: React.FC<ListProps> & {
    Section: React.FC<ListSectionProps>;
    EmptyView: React.FC<import("./empty-view").EmptyViewProps>;
    Dropdown: React.FC<{
        tooltip?: string;
        children?: ReactNode;
        defaultValue?: string;
        filtering?: boolean;
        id?: string;
        isLoading?: boolean;
        placeholder?: string;
        storeValue?: boolean;
        throttle?: boolean;
        value?: string;
        onChange?: (newValue: string) => void;
        onSearchTextChange?: (text: string) => void;
    }> & {
        Item: React.FC<{
            title: string;
            value: string;
            icon?: Image.ImageLike;
            keywords?: string[];
        }>;
        Section: React.FC<{
            title?: string;
            children?: ReactNode;
        }>;
    };
    Item: React.FC<ListItemProps> & {
        Detail: React.FC<ListItemDetailProps> & {
            Metadata: React.FC<import("./metadata").MetadataProps> & {
                Label: React.FC<import("./metadata").ListItemDetailMetadataLabelProps>;
                Separator: React.FC<{}>;
                TagList: React.FC<import("./tag").TagListProps> & {
                    Item: React.FC<import("./tag").TagItemProps>;
                };
                Link: React.FC<{
                    title: string;
                    target: string;
                    text: string;
                }>;
            };
        };
        Accessory: React.FC<List.Item.Accessory>;
    };
};
export {};
